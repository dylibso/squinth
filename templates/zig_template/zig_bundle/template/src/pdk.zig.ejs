// THIS FILE WAS GENERATED BY `xtp-zig-bindgen`. DO NOT EDIT.
const std = @import("std");
const extism = @import("extism-pdk");

const user = @import("main.zig");
const schema = @import("schema.zig");

const _plugin = extism.Plugin.init(std.heap.wasm_allocator);

const ERR_PRINTING_MSG: []const u8 = "std.fmt.allocPrint failed when formatting plugin error";

<% schema.exports.forEach(ex => { -%>
export fn <%- ex.name %>() i32 {
  <% if (ex.input) { -%>
    // Get the input data
    <% if (ex.input.contentType === 'application/json') { -%>
    // in JSON
      <% if (ex.input.$ref) { -%>
      const json_input = _plugin.getJsonOpt(schema.<%- zigTypeName(ex.input.$ref.name) %>, .{}) catch |err| {
          const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
          _plugin.setError(msg);
          return -1;
      };
      defer json_input.deinit();
      
      <% if (!ex.input.$ref.enum) { %>
        var input = json_input.value();
        // decode all the inner buffer fields from base64 (may be no-op)
        input = (input.XXX__decodeBase64Fields() catch |err| {
          const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
          _plugin.setError(msg);
          return -1;
        }).*;
      <% } %>

      <% } else if (ex.input.type === 'buffer') { -%>
      var input = json_input.value();
      var b64dec = std.base64.standard.Decoder;
      const n = b64dec.calcSizeForSlice(input) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
      };
      const dest = _plugin.allocator.alloc(u8, n) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
      };
      b64dec.decode(dest, input) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
      };
      input = dest;

      <% } else if (ex.input.type === 'object') { -%>
      const s = _plugin.getInput() catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
      };
      defer _plugin.allocator.free(s);
      const parsed_input = std.json.parseFromSlice(std.json.ArrayHashMap(std.json.Value), _plugin.allocator, s, .{ .allocate = .alloc_always }) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
      };
      const input = parsed_input.value;
      <% } else { -%> 
      const s = _plugin.getInput() catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
      };
      defer _plugin.allocator.free(s);
      const parsed_input = std.json.parseFromSlice(<%- toZigType(ex.input) %>, _plugin.allocator, s, .{ .allocate = .alloc_always }) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
      };
      const input = parsed_input.value;
      <% } -%> 
    
    <% } else if (ex.input.type === 'string') { -%>
        <% if (ex.input.$ref && ex.input.$ref.enum) { -%>		
        // as a string Enum
        const s = _plugin.getInput();
        defer _plugin.allocator.free(s);
        const input = std.enums.nameCast(<%- ex.input.$ref.name %>, s);
	    <% } else { -%>
        // as a string
		    const input = _plugin.getInput() catch |err| {
            const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
            _plugin.setError(msg);
            return -1;
        };
        defer _plugin.allocator.free(input);
		<% } %>
    <% } else { -%>
    // as a buffer
    const input = _plugin.getInput() catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };
    defer _plugin.allocator.free(input);
    <% } -%>

	// Call the implementation function
    <% if (ex.input.$ref && ex.input.$ref.enum) { -%>
    const input = json_input.value();
    <% } -%>
    <% if (ex.output) { -%>
    const output = user.<%- zigFuncName(ex.name) %>(<% if (ex.input) { %>input<% } %>) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };
    <% } else { -%>
    user.<%- zigFuncName(ex.name) %>(input) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };
    <% } -%>
  <% } else { -%>
    <% if (ex.output) { -%>
    const output = user.<%- zigFuncName(ex.name) %>() catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };
    <% } else { -%>
    user.<%- zigFuncName(ex.name) %>() catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };
    <% } -%>
  <% } -%>

  <% if (ex.output) { -%>
    <% if (ex.output.contentType === 'application/json') { -%>
      <% if (ex.output.$ref && !ex.output.$ref.enum) { -%>
        var json_output = output;
        // encode all the inner buffer fields to base64 (may be no-op)
        json_output = (json_output.XXX__encodeBase64Fields() catch |err| {
          const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
          _plugin.setError(msg);
          return -1;
        }).*;
        _plugin.outputJson(json_output, .{}) catch |err| {
          const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
          _plugin.setError(msg);
          return -1;
        };
      <% } else if (ex.output.type === 'buffer') { -%>
        var json_output = output;
        var b64enc = std.base64.standard.Encoder;
        const out_n = b64enc.calcSize(json_output.len) catch |err| {
          const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
          _plugin.setError(msg);
          return -1;
        };
        const out_dest = _plugin.allocator.alloc(u8, out_n) catch |err| {
          const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
          _plugin.setError(msg);
          return -1;
        };
        json_output = b64enc.encode(out_dest, json_output) catch |err| {
          const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
          _plugin.setError(msg);
          return -1;
        };
        _plugin.outputJson(json_output, .{}) catch |err| {
          const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
          _plugin.setError(msg);
          return -1;
        };
      <% } else { %>
        _plugin.outputJson(output, .{}) catch |err| {
          const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
          _plugin.setError(msg);
          return -1;
        };
      <% } -%>
    <% } else if (ex.output.contentType === 'text/plain; charset=UTF-8') { -%>
    if (!std.unicode.utf8ValidateSlice(output)) {
      _plugin.setError("output is not valud UTF8");
      return -1;
    }
    <% } else { -%>
      // TODO: more elegant solution
      const out_bytes: [4]u8 = @bitCast(@as(f32, @floatCast(output)));
      _plugin.output(&out_bytes);
    <% } -%>
  <% } -%>
  return 0;
}

<% }) %>

const allocator = std.heap.wasm_allocator;

export fn batch_compute_wf() i32 {
    const plugin = extism.Plugin.init(allocator);
    const input_mem = plugin.getInput() catch unreachable;
    defer allocator.free(input_mem);

    const sampleTime: f64 = @floatCast(@as(f32, @bitCast(input_mem[0..4].*)));
    const freqHz: f64 = @floatCast(@as(f32, @bitCast(input_mem[4..8].*)));
    const currPhase: f64 = @floatCast(@as(f32, @bitCast(input_mem[8..12].*)));
    
    // const numSamples

    const inputOne: f64 = @floatCast(@as(f32, @bitCast(input_mem[16..20].*)));
    const inputTwo: f64 = @floatCast(@as(f32, @bitCast(input_mem[20..24].*)));
    const inputThree: f64 = @floatCast(@as(f32, @bitCast(input_mem[24..28].*)));
    const inputFour: f64 = @floatCast(@as(f32, @bitCast(input_mem[28..32].*)));

    const isLeftChannel: bool = @as(i32, @bitCast(input_mem[32..36].*)) > 0;

    var inputs = [_]f64{ inputOne, inputTwo, inputThree, inputFour };

    var wave_args = schema.WaveArgs{
        .freq_hz = freqHz,
        .inputs = &inputs,
        .phase = 0.0, // Example: quarter phase
        .isLeftChannel = isLeftChannel, // Example: halfway through
    };

    var output: [256 * 4]u8 = [1]u8{0} ** (256 * 4);
    for (0..256) |sampleNo| {
        wave_args.phase = @mod(@as(f64, currPhase) + wave_args.freq_hz * @as(f64, sampleTime) * @as(f64, @floatFromInt(sampleNo)), 1.0);
        //const out_bytes: [4]u8 = @bitCast(@as(f32, @floatCast(user.wave(wave_args))));
        const out_bytes: [4]u8 = @bitCast(@as(f32, @floatCast(try user.wave(wave_args))));
        @memcpy(output[(sampleNo * 4)..(sampleNo * 4 + 4)], &out_bytes);
    }

    plugin.output(&output);

    return 0;
}
