//mod pdk;
//use pdk::*;
//use extism_pdk::*;

/**
 * A simple example of saw wave generator plugin
 */

// Phase represents the percentage progress that the wave has made through the wavelength
//  10
//    |\    |\    |\    @\    @
//    | \   | \   | \   | \   |
//  --|--@--|--@--|--\--|--\--|--
//    |   \ |   \ |   \ |   \ |
//    |    \|    \|    \|    \|
// -10   ▲     ▲        ▲     ▲
//       │     │        │     │
//      0.5   0.5      0.0   0.0
//               PHASE

// lfoOne and lfoTwo are the current values (-10 to 10) of two "Low Frequency Oscillators",
// waves that can be used to change certain factors over time. for example, amplitude.
// Changing the amplitude would make the wave louder and quieter over time. Think of it like
// automatically turning the volume knob up and down according to a slow sine wave.

// "Modulation" is the word typically used to describe these sorts of procedural changes

// the frequency is taken care of for you, but is is also provided here in hertz if you would
// like the synth behvior to change (modulate) according the frequency it is generating

<% schema.exports.forEach(ex => { -%>
<% if (hasComment(ex)) { -%>
// <%- formatCommentBlock(ex.description, "// ") %>
<% } -%>
pub(crate) fn <%= formatIdentifier(ex.name) %>(<%if (ex.input) { %>_input: <%- toRustType(ex.input) %> <% } %>) -> Result<<%if (ex.output) { %> <%- toRustType(ex.output) %> <% } else { %> () <% } %>, Error> {
	<% if (featureFlags['stub-with-code-samples'] && codeSamples(ex, 'rust').length > 0) { -%>
		<%- codeSamples(ex, 'rust')[0].source %>
	<% } else { -%>
    todo!("Implement <%= formatIdentifier(ex.name) %>")
	<% } -%>
}

<% }) %>
