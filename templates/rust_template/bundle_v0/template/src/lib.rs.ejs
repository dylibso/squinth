mod pdk;
mod your_module;

use pdk::*;
use extism_pdk::*;


const FLOAT32_BYTES:usize = 4;

#[plugin_fn]
pub fn batch_compute_wf(input: Vec<u8>) -> FnResult<Vec<u8>> {
    let sample_time: f32 = f32::from_le_bytes(input[0..4].try_into().unwrap());
    let freq_hz: f32 = f32::from_le_bytes(input[4..8].try_into().unwrap());
    let mut curr_phase: f32 = f32::from_le_bytes(input[8..12].try_into().unwrap());

    let time_position: f32 = f32::from_le_bytes(input[12..16].try_into().unwrap());
    let num_samples: i32 = i32::from_le_bytes(input[16..20].try_into().unwrap());

    let input_one: f32 = f32::from_le_bytes(input[20..24].try_into().unwrap());
    let input_two: f32 = f32::from_le_bytes(input[24..28].try_into().unwrap());

    if num_samples < 1 {
        // Return unchanging nonzero output, 1024 samples is more than the host would usually ask for
        return Ok(vec![0u8; 1024 * FLOAT32_BYTES]);
    } else {
    }

    let usize_num_samples: usize = num_samples.try_into().unwrap();

    let mut outbuf: Vec<u8> = vec![0; usize_num_samples * FLOAT32_BYTES];

    for sample_no in 1..usize_num_samples+1 {

        // TODO: I'm not a fan of the constant reinitialization here, but there is friction between how XTP
        //    currently works and the way I would ideally like to pass things around in rust. Specifically
        //    the user defined function does not have a way to accept a reference rather than a copy in a templated way
        let wave_args:WaveArgs = WaveArgs {
            freq_hz: freq_hz,
            inputs: vec![input_one, input_two], // TODO: this sux,
            phase: phase,
            time_position: time_position,
        };

        curr_phase = (curr_phase + (freq_hz * sample_time * sample_no as f32)).fract();
        // Computes the value of this individual sample and puts it where it belongs in the output buffer
        outbuf[index * FLOAT32_BYTES..index * FLOAT32_BYTES + 4].copy_from_slice(
            &your_module::wave(wave_args).to_le_bytes(),
        );
    }

    Ok(outbuf)
}
