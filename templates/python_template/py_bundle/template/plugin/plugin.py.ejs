# A simple example of saw wave generator plugin

# Phase represents the percentage progress that the wave has made through the wavelength
#  10
#    |\    |\    |\    @\    @
#    | \   | \   | \   | \   |
#  --|--@--|--@--|--\--|--\--|--
#    |   \ |   \ |   \ |   \ |
#    |    \|    \|    \|    \|
# -10   ▲     ▲        ▲     ▲
#       │     │        │     │
#      0.5   0.5      0.0   0.0
#               PHASE

# lfoOne and lfoTwo are the current values (-10 to 10) of two "Low Frequency Oscillators",
# waves that can be used to change certain factors over time. for example, amplitude.
# Changing the amplitude would make the wave louder and quieter over time. Think of it like
# automatically turning the volume knob up and down according to a slow sine wave.

# "Modulation" is the word typically used to describe these sorts of procedural changes

# the frequency is taken care of for you, but is is also provided here in hertz if you would
# like the synth behavior to change (modulate) according the frequency it is generating

from typing import Optional, List # noqa: F401
from datetime import datetime # noqa: F401
import extism # noqa: F401 # pyright: ignore

<% if (Object.values(schema.schemas).length > 0) { %>
from pdk_types import <%- Object.values(schema.schemas).map(schema => pythonTypeName(schema.name)).join(", ") %> # noqa: F401
<% } %>
<% if (schema.imports.length > 0) { %>
from pdk_imports import <%- schema.imports.map(schema => pythonFunctionName(schema.name)).join(", ") %> # noqa: F401
<% } %>
from typing import List, Optional # noqa: F401

<% schema.exports.forEach(ex => { -%>
<% if (hasComment(ex)) { -%>
# <%- formatCommentBlock(ex.description, "# ") %>
<% } -%>
def <%- pythonFunctionName(ex.name) %>(<% if (ex.input) { %>input: <%- toPythonParamType(ex.input) %> <% } %>) <% if (ex.output) {%>-> <%- toPythonParamType(ex.output) %><%}%>:
<% if (featureFlags['stub-with-code-samples'] && codeSamples(ex, 'python').length > 0) { -%>
<% for (const line of codeSamples(ex, 'python')[0].source.split("\n")) { -%>
    <%- line %>
<% } -%>
<% } else { -%>
  raise Exception("Unimplemented: <%- ex.name %>")
<% } -%>
<% }) %>

