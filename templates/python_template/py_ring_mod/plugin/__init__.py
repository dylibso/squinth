# THIS FILE WAS GENERATED BY `xtp-python-bindgen`. DO NOT EDIT.

from typing import Optional, List  # noqa: F401
from datetime import datetime  # noqa: F401
import json
import extism  # pyright: ignore
import plugin

from array import array


from pdk_types import WaveArgs  # noqa: F401


# Imports


# Exports
# The implementations for these functions is in `plugin.py`


# User-defined function that computes a single sample of a waveform
@extism.plugin_fn
def wave():
    input = extism.input_str()
    input = WaveArgs.from_json(input)
    res = plugin.wave(input)
    extism.output_bytes(res)


@extism.plugin_fn
def batch_compute_wf():
    input: bytes = extism.input_bytes()

    input_args = array("f", input)
    integer_input_args = array("i", input)  # TODO: only convert one value

    sampleTime: float = input_args[0]
    freqHz: float = input_args[1]
    currPhase: float = input_args[2]

    numSamples: int = integer_input_args[3]

    inputOne: float = input_args[4]
    inputTwo: float = input_args[5]
    inputThree: float = input_args[6]
    inputFour: float = input_args[7]

    isLeftChannel: bool = integer_input_args[8] > 0

    sample = array("q", input[4 * 9 : 4 * 11])[0]
    sample_rate = input_args[11]

    floatbuf: list = list([0.0] * numSamples)

    args: WaveArgs = WaveArgs(
        freq_hz=freqHz,
        inputs=[inputOne, inputTwo, inputThree, inputFour],
        phase=currPhase,
        isLeftChannel=isLeftChannel,
        sample=sample,
        sampleRate=sample_rate,
    )
    for sampleNo in range(0, numSamples):
        args.phase = (currPhase + args.freq_hz * sampleTime * sampleNo) % 1.0
        args.sample += 1
        floatbuf[sampleNo] = plugin.wave(args)

    extism.output(array("f", floatbuf).tobytes())

    return 0
